{
  "address": "0x9Ba51b58D296b0E96e8F06F66FC59E401f084f0a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fundingAddress",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x26a8d478ad3fe886483f5d47c7418c196dc814755b1aee2a4b7e4616e582154f",
  "receipt": {
    "to": null,
    "from": "0xc50557Deb6F7Fcf69ca77b26C8A1D37C250B13F8",
    "contractAddress": "0x9Ba51b58D296b0E96e8F06F66FC59E401f084f0a",
    "transactionIndex": 2,
    "gasUsed": "1078845",
    "logsBloom": "0x
    "blockHash": "0x910274eebbee7178c620603bd334e25d6f6db2068ed48481f093356720f1cb39",
    "transactionHash": "0x26a8d478ad3fe886483f5d47c7418c196dc814755b1aee2a4b7e4616e582154f",
    "logs": [],
    "blockNumber": 3067591,
    "cumulativeGasUsed": "1120845",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x694AA1769357215DE4FAC081bf1f309aDC325306"
  ],
  "numDeployments": 4,
  "solcInputHash": "724a11bed5cee61f56245b53571b9883",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundingAddress\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getAddressToAmountFunded(address)\":{\"params\":{\"fundingAddress\":\"the address of the funder\"},\"returns\":{\"_0\":\"the amount funded\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"Funds our contract based on the ETH/USD price\"},\"getAddressToAmountFunded(address)\":{\"notice\":\"Gets the amount that an address has funded\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// 1. Pragma\\npragma solidity ^0.8.7;\\n// 2. Imports\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\n// 3. Interfaces, Libraries, Contracts\\nerror FundMe__NotOwner();\\n\\ncontract FundMe {\\n    // Type Declarations\\n    using PriceConverter for uint256;\\n\\n    // State variables\\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\\n    address private immutable i_owner;\\n    address[] private s_funders;\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    AggregatorV3Interface public s_priceFeed;\\n\\n    // Events (we have none!)\\n\\n    // Modifiers\\n    modifier onlyOwner() {\\n        // require(msg.sender == i_owner);\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n\\n    // Functions Order:\\n    //// constructor\\n    //// receive\\n    //// fallback\\n    //// external\\n    //// public\\n    //// internal\\n    //// private\\n    //// view / pure\\n\\n    constructor(address priceFeed) {\\n        s_priceFeed = AggregatorV3Interface(priceFeed);\\n        i_owner = msg.sender;\\n    }\\n\\n    /// @notice Funds our contract based on the ETH/USD price\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"You need to spend more ETH!\\\"\\n        );\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // Transfer vs call vs Send\\n        // payable(msg.sender).transfer(address(this).balance);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    function cheaperWithdraw() public onlyOwner {\\n        address[] memory funders = s_funders;\\n        // mappings can't be in memory, sorry!\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // payable(msg.sender).transfer(address(this).balance);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    /** @notice Gets the amount that an address has funded\\n     *  @param fundingAddress the address of the funder\\n     *  @return the amount funded\\n     */\\n    function getAddressToAmountFunded(\\n        address fundingAddress\\n    ) public view returns (uint256) {\\n        return s_addressToAmountFunded[fundingAddress];\\n    }\\n\\n    function getVersion() public view returns (uint256) {\\n        return s_priceFeed.version();\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0x57c3ea66c30456c54aabfb276b8a7140b94ebaee785de3d1dc60328d78f567b6\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    function getPrice(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n    }\\n\\n    // 1000000000\\n    // call it get fiatConversionRate, since it assumes something about decimals\\n    // It wouldn't work for every aggregator\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // the actual ETH/USD conversation rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0xeeacca248fbda7cef395e4ab393f5240714990fe60f56ab0a91e55b729cf1a65\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620013b0380380620013b08339818101604052810190620000379190620000cd565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250505062000152565b600081519050620000c78162000138565b92915050565b600060208284031215620000e657620000e562000133565b5b6000620000f684828501620000b6565b91505092915050565b60006200010c8262000113565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6200014381620000ff565b81146200014f57600080fd5b50565b60805160601c6112236200018d60003960008181610337015281816104ca01528181610570015281816106fb01526108f101526112236000f3fe6080604052600436106100915760003560e01c8063893d20e811610059578063893d20e81461016b5780639e87a5cd14610196578063b60d4288146101c1578063be2693f0146101cb578063d7b4750c146101e257610091565b80630343fb25146100965780630d8e6e2c146100d35780630ec3b027146100fe5780633ccfd60b146101295780636b69a59214610140575b600080fd5b3480156100a257600080fd5b506100bd60048036038101906100b89190610bba565b61021f565b6040516100ca9190610d9a565b60405180910390f35b3480156100df57600080fd5b506100e8610268565b6040516100f59190610d9a565b60405180910390f35b34801561010a57600080fd5b5061011361030f565b6040516101209190610d5f565b60405180910390f35b34801561013557600080fd5b5061013e610335565b005b34801561014c57600080fd5b5061015561055f565b6040516101629190610d9a565b60405180910390f35b34801561017757600080fd5b5061018061056c565b60405161018d9190610d44565b60405180910390f35b3480156101a257600080fd5b506101ab610594565b6040516101b89190610d5f565b60405180910390f35b6101c96105be565b005b3480156101d757600080fd5b506101e06106f9565b005b3480156101ee57600080fd5b5061020960048036038101906102049190610be7565b610987565b6040516102169190610d44565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b1580156102d257600080fd5b505afa1580156102e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030a9190610c14565b905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103ba576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156104655760008082815481106103df576103de611102565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061045d9061105b565b9150506103bd565b50600067ffffffffffffffff81111561048157610480611131565b5b6040519080825280602002602001820160405280156104af5781602001602082028036833780820191505090505b50600090805190602001906104c5929190610aaa565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161050c90610d2f565b60006040518083038185875af1925050503d8060008114610549576040519150601f19603f3d011682016040523d82523d6000602084013e61054e565b606091505b505090508061055c57600080fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b18800006105fd600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346109ce90919063ffffffff16565b101561063e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063590610d7a565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461068d9190610dd1565b925050819055506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461077e576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561080157602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116107b7575b5050505050905060005b815181101561088c57600082828151811061082957610828611102565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806108849061105b565b91505061080b565b50600067ffffffffffffffff8111156108a8576108a7611131565b5b6040519080825280602002602001820160405280156108d65781602001602082028036833780820191505090505b50600090805190602001906108ec929190610aaa565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161093390610d2f565b60006040518083038185875af1925050503d8060008114610970576040519150601f19603f3d011682016040523d82523d6000602084013e610975565b606091505b505090508061098357600080fd5b5050565b600080828154811061099c5761099b611102565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806109da83610a0a565b90506000670de0b6b3a764000085836109f39190610f6f565b6109fd9190610e27565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610a5357600080fd5b505afa158015610a67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8b9190610c41565b5050509150506402540be40081610aa29190610e58565b915050919050565b828054828255906000526020600020908101928215610b23579160200282015b82811115610b225782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610aca565b5b509050610b309190610b34565b5090565b5b80821115610b4d576000816000905550600101610b35565b5090565b600081359050610b6081611191565b92915050565b600081519050610b75816111a8565b92915050565b600081359050610b8a816111bf565b92915050565b600081519050610b9f816111bf565b92915050565b600081519050610bb4816111d6565b92915050565b600060208284031215610bd057610bcf611160565b5b6000610bde84828501610b51565b91505092915050565b600060208284031215610bfd57610bfc611160565b5b6000610c0b84828501610b7b565b91505092915050565b600060208284031215610c2a57610c29611160565b5b6000610c3884828501610b90565b91505092915050565b600080600080600060a08688031215610c5d57610c5c611160565b5b6000610c6b88828901610ba5565b9550506020610c7c88828901610b66565b9450506040610c8d88828901610b90565b9350506060610c9e88828901610b90565b9250506080610caf88828901610ba5565b9150509295509295909350565b610cc581610fc9565b82525050565b610cd481611025565b82525050565b6000610ce7601b83610dc0565b9150610cf282611165565b602082019050919050565b6000610d0a600083610db5565b9150610d158261118e565b600082019050919050565b610d2981611005565b82525050565b6000610d3a82610cfd565b9150819050919050565b6000602082019050610d596000830184610cbc565b92915050565b6000602082019050610d746000830184610ccb565b92915050565b60006020820190508181036000830152610d9381610cda565b9050919050565b6000602082019050610daf6000830184610d20565b92915050565b600081905092915050565b600082825260208201905092915050565b6000610ddc82611005565b9150610de783611005565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e1c57610e1b6110a4565b5b828201905092915050565b6000610e3282611005565b9150610e3d83611005565b925082610e4d57610e4c6110d3565b5b828204905092915050565b6000610e6382610fdb565b9150610e6e83610fdb565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610ead57610eac6110a4565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610eea57610ee96110a4565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610f2757610f266110a4565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610f6457610f636110a4565b5b828202905092915050565b6000610f7a82611005565b9150610f8583611005565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610fbe57610fbd6110a4565b5b828202905092915050565b6000610fd482610fe5565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b600061103082611037565b9050919050565b600061104282611049565b9050919050565b600061105482610fe5565b9050919050565b600061106682611005565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611099576110986110a4565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b50565b61119a81610fc9565b81146111a557600080fd5b50565b6111b181610fdb565b81146111bc57600080fd5b50565b6111c881611005565b81146111d357600080fd5b50565b6111df8161100f565b81146111ea57600080fd5b5056fea2646970667358221220ac63f91d24afc052b97ec3031a4a979c3a2565ff0866bf69ed2a23809d8593e964736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106100915760003560e01c8063893d20e811610059578063893d20e81461016b5780639e87a5cd14610196578063b60d4288146101c1578063be2693f0146101cb578063d7b4750c146101e257610091565b80630343fb25146100965780630d8e6e2c146100d35780630ec3b027146100fe5780633ccfd60b146101295780636b69a59214610140575b600080fd5b3480156100a257600080fd5b506100bd60048036038101906100b89190610bba565b61021f565b6040516100ca9190610d9a565b60405180910390f35b3480156100df57600080fd5b506100e8610268565b6040516100f59190610d9a565b60405180910390f35b34801561010a57600080fd5b5061011361030f565b6040516101209190610d5f565b60405180910390f35b34801561013557600080fd5b5061013e610335565b005b34801561014c57600080fd5b5061015561055f565b6040516101629190610d9a565b60405180910390f35b34801561017757600080fd5b5061018061056c565b60405161018d9190610d44565b60405180910390f35b3480156101a257600080fd5b506101ab610594565b6040516101b89190610d5f565b60405180910390f35b6101c96105be565b005b3480156101d757600080fd5b506101e06106f9565b005b3480156101ee57600080fd5b5061020960048036038101906102049190610be7565b610987565b6040516102169190610d44565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b1580156102d257600080fd5b505afa1580156102e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030a9190610c14565b905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103ba576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156104655760008082815481106103df576103de611102565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061045d9061105b565b9150506103bd565b50600067ffffffffffffffff81111561048157610480611131565b5b6040519080825280602002602001820160405280156104af5781602001602082028036833780820191505090505b50600090805190602001906104c5929190610aaa565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161050c90610d2f565b60006040518083038185875af1925050503d8060008114610549576040519150601f19603f3d011682016040523d82523d6000602084013e61054e565b606091505b505090508061055c57600080fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b18800006105fd600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346109ce90919063ffffffff16565b101561063e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063590610d7a565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461068d9190610dd1565b925050819055506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461077e576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561080157602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116107b7575b5050505050905060005b815181101561088c57600082828151811061082957610828611102565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806108849061105b565b91505061080b565b50600067ffffffffffffffff8111156108a8576108a7611131565b5b6040519080825280602002602001820160405280156108d65781602001602082028036833780820191505090505b50600090805190602001906108ec929190610aaa565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161093390610d2f565b60006040518083038185875af1925050503d8060008114610970576040519150601f19603f3d011682016040523d82523d6000602084013e610975565b606091505b505090508061098357600080fd5b5050565b600080828154811061099c5761099b611102565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806109da83610a0a565b90506000670de0b6b3a764000085836109f39190610f6f565b6109fd9190610e27565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610a5357600080fd5b505afa158015610a67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8b9190610c41565b5050509150506402540be40081610aa29190610e58565b915050919050565b828054828255906000526020600020908101928215610b23579160200282015b82811115610b225782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610aca565b5b509050610b309190610b34565b5090565b5b80821115610b4d576000816000905550600101610b35565b5090565b600081359050610b6081611191565b92915050565b600081519050610b75816111a8565b92915050565b600081359050610b8a816111bf565b92915050565b600081519050610b9f816111bf565b92915050565b600081519050610bb4816111d6565b92915050565b600060208284031215610bd057610bcf611160565b5b6000610bde84828501610b51565b91505092915050565b600060208284031215610bfd57610bfc611160565b5b6000610c0b84828501610b7b565b91505092915050565b600060208284031215610c2a57610c29611160565b5b6000610c3884828501610b90565b91505092915050565b600080600080600060a08688031215610c5d57610c5c611160565b5b6000610c6b88828901610ba5565b9550506020610c7c88828901610b66565b9450506040610c8d88828901610b90565b9350506060610c9e88828901610b90565b9250506080610caf88828901610ba5565b9150509295509295909350565b610cc581610fc9565b82525050565b610cd481611025565b82525050565b6000610ce7601b83610dc0565b9150610cf282611165565b602082019050919050565b6000610d0a600083610db5565b9150610d158261118e565b600082019050919050565b610d2981611005565b82525050565b6000610d3a82610cfd565b9150819050919050565b6000602082019050610d596000830184610cbc565b92915050565b6000602082019050610d746000830184610ccb565b92915050565b60006020820190508181036000830152610d9381610cda565b9050919050565b6000602082019050610daf6000830184610d20565b92915050565b600081905092915050565b600082825260208201905092915050565b6000610ddc82611005565b9150610de783611005565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e1c57610e1b6110a4565b5b828201905092915050565b6000610e3282611005565b9150610e3d83611005565b925082610e4d57610e4c6110d3565b5b828204905092915050565b6000610e6382610fdb565b9150610e6e83610fdb565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610ead57610eac6110a4565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610eea57610ee96110a4565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610f2757610f266110a4565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610f6457610f636110a4565b5b828202905092915050565b6000610f7a82611005565b9150610f8583611005565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610fbe57610fbd6110a4565b5b828202905092915050565b6000610fd482610fe5565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b600061103082611037565b9050919050565b600061104282611049565b9050919050565b600061105482610fe5565b9050919050565b600061106682611005565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611099576110986110a4565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b50565b61119a81610fc9565b81146111a557600080fd5b50565b6111b181610fdb565b81146111bc57600080fd5b50565b6111c881611005565b81146111d357600080fd5b50565b6111df8161100f565b81146111ea57600080fd5b5056fea2646970667358221220ac63f91d24afc052b97ec3031a4a979c3a2565ff0866bf69ed2a23809d8593e964736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getAddressToAmountFunded(address)": {
        "params": {
          "fundingAddress": "the address of the funder"
        },
        "returns": {
          "_0": "the amount funded"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "Funds our contract based on the ETH/USD price"
      },
      "getAddressToAmountFunded(address)": {
        "notice": "Gets the amount that an address has funded"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 66,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 70,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 73,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}